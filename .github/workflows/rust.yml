name: Rust

on:
  push:
    branches: ["telegram-bot"]
  pull_request:
    branches: ["telegram-bot"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: ⚡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: ⚡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features

  gen_doc_coverage:
    name: Generate documentation coverage badge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: ⚡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - id: coverage
        uses: bewee/rustdoc-coverage-action@v1
        with:
          percentage-format: 0%
      - name: Create Doc Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 1b10014d0019c22cc1984bc8a7be7152
          filename: doc-coverage.json
          label: doc coverage
          message: ${{ steps.coverage.outputs.documented }}
          color: orange

  print_test_coverage:
    name: Generate test coverage badge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          override: true
      - name: ⚡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests with coverage instrumentation
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features
        env:
          LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: >-
            -Cinstrument-coverage
            -Ccodegen-units=1
            -Copt-level=0
            -Clink-dead-code
            -Coverflow-checks=off
          RUSTDOCFLAGS: >-
            -Cinstrument-coverage
            -Ccodegen-units=1
            -Copt-level=0
            -Clink-dead-code
            -Coverflow-checks=off
      - name: Debug test output
        run: |
          echo "Contents of target/doc:"
          ls -R . || echo "No docs found, continuing..."
      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1
      - name: Render HTML coverage report & prepare badge data
        run: |
          # 1) Render HTML
          grcov . \
            --binary-path ./target/debug/ \
            --source-dir . \
            --branch \
            --ignore-not-existing \
            -t html \
            -o coverage/html
  
          # 2) Compute overall coverage as an integer percentage:
          COVERAGE=$(grcov . \
            --binary-path ./target/debug/ \
            --source-dir . \
            --branch \
            --ignore-not-existing \
            -t cobertura \
            -o coverage/cobertura.xml \
            && xmlstarlet sel \
                -t \
                -v "round( sum(//coverage/@line-rate) div count(//coverage/@line-rate) * 100 )" \
                coverage/cobertura.xml)
  
          # 3) Emit a Shields.io–style JSON endpoint:
          mkdir -p coverage/json
          cat <<EOF > coverage/json/coverage.json
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%"
          }
          EOF
  
      - name: Deploy coverage site & badge data to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: coverage

  docs:
    name: Generate and Upload Docs
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: ⚡ Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Clean docs folder
        run: cargo clean --doc
      - name: Build docs
        run: cargo doc --workspace --no-deps
      - name: Disable Jekyll
        run: touch target/doc/.nojekyll
      - name: Debug docs output
        run: |
          echo "Contents of target/doc:"
          ls -R target/doc || echo "No docs found, continuing..."
      - name: Upload docs artifact
        uses: actions/upload-pages-artifact@v3
        with:
          include-hidden-files: true
          path: target/doc

  deploy:
    name: Deploy Pages
    needs: docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

